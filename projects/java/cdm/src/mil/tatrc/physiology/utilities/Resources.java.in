/**************************************************************************************
Copyright 2015 Applied Research Associates, Inc.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the License
at:
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
CONDITIONS OF ANY KIND, either express or implied. See the License for the
specific language governing permissions and limitations under the License.
**************************************************************************************/

package mil.tatrc.physiology.utilities;

import java.lang.String;

import java.util.ArrayList;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import java.io.FileNotFoundException;


public class Resources
{
  private ArrayList<Path> libraries = new ArrayList<Path>();

  private ArrayList<Path> binPath = new ArrayList<Path>();
  private ArrayList<Path> libPath = new ArrayList<Path>();
  private ArrayList<Path> resourcePath = new ArrayList<Path>();
  private ArrayList<Path> classPath = new ArrayList<Path>();

  public Resources () 
  {
    initialize("");
  }
  public Resources (String sysroot) 
  {
    initialize(sysroot);
  }

  private void initialize(String sysroot) 
  {
    libraries.add(Paths.get(String.valueOf("$<TARGET_FILE:Log4cpp::Log4cpp>").replaceFirst("lib/","bin/").replace("@CMAKE_LINK_LIBRARY_SUFFIX@","@CMAKE_SHARED_LIBRARY_SUFFIX@")));
    libraries.add(Paths.get(String.valueOf("$<TARGET_FILE:Xerces::xerces>").replaceFirst("lib/","bin/").replace("@CMAKE_LINK_LIBRARY_SUFFIX@","@CMAKE_SHARED_LIBRARY_SUFFIX@")));
    $<$<PLATFORM_ID:Windows>:libraries.add(Paths.get("$<TARGET_FILE:libbiogears_string>"));>
    libraries.add(Paths.get("$<TARGET_FILE:libbiogears_cdm>"));
    libraries.add(Paths.get("$<TARGET_FILE:libbiogears>"));
    libraries.add(Paths.get("$<TARGET_FILE:libbiogears_jni>"));

    if ( !sysroot.isEmpty() ) {  
      binPath.add( Paths.get(sysroot).toAbsolutePath().resolve("bin") );
      libPath.add( Paths.get(sysroot).toAbsolutePath().resolve("lib") );
      resourcePath.add( Paths.get(sysroot).toAbsolutePath().resolve("resources") );
      classPath.add( Paths.get(sysroot).toAbsolutePath().resolve("jar") );

      binPath.add( Paths.get(sysroot).toAbsolutePath().resolve("usr/bin") );
      libPath.add( Paths.get(sysroot).toAbsolutePath().resolve("usr/lib") );
      resourcePath.add( Paths.get(sysroot).toAbsolutePath().resolve("share/biogears/resources") );
      classPath.add( Paths.get(sysroot).toAbsolutePath().resolve("usr/jar") );
    }

    binPath.add(Paths.get("@ARA_Biogears_EXTERNAL@/bin"));
    binPath.add(Paths.get("./").toAbsolutePath().resolve("bin"));
    binPath.add(Paths.get(System.getProperty("user.dir")).resolve("bin"));
    binPath.add(Paths.get(System.getProperty("user.home")).resolve("bin"));
    binPath.add(Paths.get(System.getProperty("user.dir")).resolve("usr/bin"));
    binPath.add(Paths.get(System.getProperty("user.home")).resolve("usr/bin"));

    libPath.add(Paths.get("@ARA_Biogears_EXTERNAL@/lib"));
    libPath.add(Paths.get("./").toAbsolutePath().resolve("lib"));
    libPath.add(Paths.get(System.getProperty("user.dir")).resolve("lib"));
    libPath.add(Paths.get(System.getProperty("user.home")).resolve("lib"));
    libPath.add(Paths.get(System.getProperty("user.dir")).resolve("usr/lib"));
    libPath.add(Paths.get(System.getProperty("user.home")).resolve("usr/lib"));


    resourcePath.add(Paths.get("@CMAKE_CURRENT_BINARY_DIR@/resources"));
    resourcePath.add(Paths.get("./").toAbsolutePath().resolve("resources"));
    resourcePath.add(Paths.get(System.getProperty("user.dir")).resolve("biogears/resources"));
    resourcePath.add(Paths.get(System.getProperty("user.home")).resolve("biogears/resources"));
    resourcePath.add(Paths.get(System.getProperty("user.dir")).resolve("share/biogears/resources"));
    resourcePath.add(Paths.get(System.getProperty("user.home")).resolve("share/biogears/resources"));

    classPath.add(Paths.get("@ARA_Biogears_EXTERNAL@/jar"));
    classPath.add(Paths.get("./").toAbsolutePath().resolve("jar"));
    classPath.add(Paths.get(System.getProperty("user.dir")).resolve("jar"));
    classPath.add(Paths.get(System.getProperty("user.home")).resolve("jar"));
    classPath.add(Paths.get(System.getProperty("user.dir")).resolve("usr/jar"));
    classPath.add(Paths.get(System.getProperty("user.home")).resolve("usr/jar"));
  }

  public final ArrayList<Path> getLibraries() {
    return libraries;
  }

  public final Path findResource( String resource ) throws FileNotFoundException 
  {
    return findResource( Paths.get(resource) );
  }

  public final Path findResource( Path resource ) throws FileNotFoundException 
  {
    boolean result = true;
    if ( Files.exists(resource) )
    {
      return resource;
    } else {
      ArrayList<Path> suffixes = new ArrayList<Path>();
      suffixes.add(resource.getFileName());
      suffixes.add(resource);
      for ( Path suffix : suffixes )
      {
        for ( Path path : resourcePath ) {
          if ( Files.isRegularFile(path.resolve(suffix)) )
          {
            return path.resolve(suffix);
          }
        } 
      }  
    }
    throw new FileNotFoundException( String.format (
       "%s not found among the following paths\n %s"
       ,resource
       ,resourcePath.toString()
      ));
  }

  public final Path findLibrary(Path library) throws FileNotFoundException 
  {
    boolean result = true;
    if ( Files.exists(library) )
    {
      return library;
    } else {
      ArrayList<Path> suffixes = new ArrayList<Path>();
      suffixes.add(library.getFileName());
      suffixes.add(library);
      for ( Path suffix :  suffixes )
      {
        for ( Path path : libPath ) {
          if ( Files.isRegularFile(path.resolve(suffix)) )
          {
            return path.resolve(suffix);
          }
        } 
      }
    }
    throw new FileNotFoundException( String.format (
       "%s not found among the following paths\n %s"
       ,library
       ,libPath.toString()
      ));
  }

  public final Path findExecutable(Path exe) throws FileNotFoundException 
  {
    boolean result = true;
    if ( Files.exists(exe) )
    {
      return exe;
    } else {
      ArrayList<Path> suffixes = new ArrayList<Path>();
      suffixes.add(exe.getFileName());
      suffixes.add(exe);
      for ( Path suffix : suffixes )
      {
        for ( Path path : binPath ) {
          if ( Files.isRegularFile(path.resolve(suffix)) )
          {
            return path.resolve(suffix);
          }
        } 
      }
    }
    throw new FileNotFoundException( String.format (
       "%s not found among the following paths\n %s"
       ,exe
       ,binPath.toString()
      ));
  }

  public final Path findJar(Path jar) throws FileNotFoundException 
  {
    boolean result = true;
    if ( Files.exists(jar) )
    {
      return jar;
    } else {
       ArrayList<Path> suffixes = new ArrayList<Path>();
      suffixes.add(jar.getFileName());
      suffixes.add(jar);      
      for ( Path suffix : suffixes )
      {
        for ( Path path : classPath ) {
          if ( Files.isRegularFile(path.resolve(suffix)) )
          {
            return path.resolve(suffix);
          }
        } 
      }
    }
    throw new FileNotFoundException( String.format (
       "%s not found among the following paths\n %s"
       ,jar
       ,classPath.toString()
      ));
  }

  public void clearBinPath() {
    binPath.clear();
  }

  public void clearLibPath() {
   libPath.clear(); 
  }

  public void clearResourcePath() {
    resourcePath.clear();
  }

  public void clearJarPath() {
    classPath.clear();
  }

  public void AppendBinPath(Path path) {
    binPath.add(path);
  }

  public void AppendLibPath(Path path) {
   libPath.add(path); 
  }

  public void AppendResourcePath(Path path) {
    resourcePath.add(path);
  }

  public void AppendJarPath(Path path) {
    classPath.add(path);
  }

  public boolean dropBinPath(Path path) {
    return binPath.remove(path);
  }

  public boolean dropLibPath(Path path) {
    return libPath.remove(path); 
  }

  public boolean dropResourcePath(Path path) {
    return resourcePath.remove(path);
  }

  public boolean dropJarPath(Path path) {
    return classPath.remove(path);
  }

}
